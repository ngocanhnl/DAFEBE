
const mongoose = require("mongoose");
const axios = require("axios");
const Course = require("../models/course.model");
const { v4: uuidv4 } = require("uuid");
const CourseCategory = require("../models/course-category.model");
const Class = require("../models/class.model");
const Account = require("../models/account.model");
// ================== CONFIG ==================
const MONGO_URI = "mongodb://localhost:27017/products-test"; // ch·ªânh l·∫°i DB n·∫øu kh√°c
const QDRANT_API_URL =
  "https://17287bcd-e993-4bf8-b129-b587d76d47c8.eu-central-1-0.aws.cloud.qdrant.io"; // endpoint Qdrant Cloud
const QDRANT_COLLECTION = "chatbot_vectors"; // t√™n collection trong Qdrant
const QDRANT_API_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIn0.LWyQxpLjxPQoQITJfMW78hirBFKsYbuvPJjZ-RNE22I"; // üîë thay b·∫±ng key Qdrant c·ªßa b·∫°n

const GEMINI_API_KEY = "AIzaSyDzX5cVtr1g--VOPTBbuysgNBJAeiMiTwM"; // üîë thay b·∫±ng key Gemini c·ªßa b·∫°n

// ================== X√≥a to√†n b·ªô d·ªØ li·ªáu c≈© trong Qdrant ==================
async function resetCollection() {
  try {
    // X√≥a collection c≈© n·∫øu t·ªìn t·∫°i
    await axios.delete(`${QDRANT_API_URL}/collections/${QDRANT_COLLECTION}`, {
      headers: { "api-key": QDRANT_API_KEY }
    });
    console.log("üóë ƒê√£ x√≥a collection c≈©");

    // T·∫°o l·∫°i collection m·ªõi
    await axios.put(
      `${QDRANT_API_URL}/collections/${QDRANT_COLLECTION}`,
      {
        vectors: { size: 768, distance: "Cosine" }
      },
      { headers: { "api-key": QDRANT_API_KEY } }
    );
    console.log("‚úÖ Collection m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o");
  } catch (err) {
    console.error("‚ùå L·ªói reset collection:", err.response?.data || err.message);
  }
}

// ================== H√†m g·ªçi embedding t·ª´ Gemini ==================
async function embedText(text) {
  try {
    const res = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent?key=${GEMINI_API_KEY}`,
      {
        model: "models/text-embedding-004",
        content: { parts: [{ text }] }
      }
    );
    return res.data.embedding?.values || [];
  } catch (err) {
    console.error("‚ùå L·ªói embedding:", err.response?.data || err.message);
    return [];
  }
}

// ================== ƒê·ªìng b·ªô d·ªØ li·ªáu l√™n Qdrant ==================
async function syncCoursesToQdrant() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log("‚úÖ Connected MongoDB");

    // Reset collection (x√≥a v√† t·∫°o m·ªõi)
    await resetCollection();

    // L·∫•y t·∫•t c·∫£ class k√®m th√¥ng tin course v√† instructor
    const classes = await Class.find({ deleted: false })
      .populate("course_id")
      .populate("instructor_id");

    console.log(`üìö T√¨m th·∫•y ${classes.length} l·ªõp h·ªçc`);

    for (const cls of classes) {
      const course = cls.course_id;
      if (!course) continue;

      const category = await CourseCategory.findById(course.course_category_id);
      const instructor = cls.instructor_id;
      const mergedDescription = [
        course.description,
        cls.description
      ].filter(Boolean).join(" "); // ch·ªâ l·∫•y ph·∫ßn n√†o c√≥ d·ªØ li·ªáu, n·ªëi c√°ch nhau 1 d·∫•u c√°ch


      // T·∫°o description phong ph√∫
      const description = `
        Kh√≥a h·ªçc: ${course.title}
        Danh m·ª•c: ${category ? category.title : "Ch∆∞a r√µ"}
        Gi√°: ${cls.price || course.price || "Ch∆∞a c√≥"}
        M√£ l·ªõp: ${cls._id}
        T√™n l·ªõp: ${cls.class_name}
        Th·ªùi gian: t·ª´ ${cls.start_date?.toLocaleDateString() || "?"} ƒë·∫øn ${cls.end_date?.toLocaleDateString() || "?"}
        L·ªãch h·ªçc: ${(cls.schedule || []).map(s => `Th·ª© ${s.day_of_week}, ${s.start_time}-${s.end_time} t·∫°i ${s.room}`).join("; ") || "Ch∆∞a c·∫≠p nh·∫≠t"}
        S·ªë h·ªçc vi√™n hi·ªán t·∫°i: ${cls.current_students}/${cls.max_students}
        Gi√°o vi√™n: ${instructor ? instructor.full_name : "Ch∆∞a r√µ"}
        M√¥ t·∫£: ${mergedDescription || "Kh√¥ng c√≥ m√¥ t·∫£"}
      `;
//M√¥ t·∫£: ${course.description || cls.description || "Kh√¥ng c√≥ m√¥ t·∫£"}
      const vector = await embedText(description);
      if (!vector.length) continue;

      const payload = {
        mongo_class_id: cls._id.toString(),
        mongo_course_id: course._id.toString(),
        title: course.title,
        class_name: cls.class_name,
        description: course.description,
        category: category ? category.title : null,
        price: cls.price || course.price,
        schedule: cls.schedule,
        instructor_name: instructor ? instructor.full_name : null,
        current_students: cls.current_students,
        max_students: cls.max_students,
        start_date: cls.start_date,
        end_date: cls.end_date
      };

      await axios.put(
        `${QDRANT_API_URL}/collections/${QDRANT_COLLECTION}/points`,
        { points: [{ id: uuidv4(), vector, payload }] },
        { headers: { "api-key": QDRANT_API_KEY } }
      );

      console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô l·ªõp: ${cls.class_name} (${course.title})`);
    }
  } catch (err) {
    console.error("‚ùå L·ªói:", err.message);
  } finally {
    await mongoose.disconnect();
    console.log("üîå MongoDB disconnected");
  }
}

if (require.main === module) {
  syncCoursesToQdrant();
}

module.exports = { syncCoursesToQdrant };


